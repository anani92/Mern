{"ast":null,"code":"export const UPDATE_FORM = 'UPDATE_FORM';\nexport const validateInput = (name, value) => {\n  let hasError = false,\n    error = '';\n  switch (name) {\n    case 'name':\n      if (value.trim() === '') {\n        hasError = true;\n        error = 'Name cannot be empty';\n      } else if (!/^[a-zA-Z ]+$/.test(value)) {\n        hasError = true;\n        error = 'Invalid Name. Avoid Special characters';\n      } else {\n        hasError = false;\n        error = '';\n      }\n      break;\n    case 'email':\n      if (value.trim() === '') {\n        hasError = true;\n        error = 'Email cannot be empty';\n      } else if (!/^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/.test(value)) {\n        hasError = true;\n        error = 'Invalid Email';\n      } else {\n        hasError = false;\n        error = '';\n      }\n      break;\n    case 'password':\n      if (value.trim() === '') {\n        hasError = true;\n        error = 'Password cannot be empty';\n      } else if (value.trim().length < 8) {\n        hasError = true;\n        error = 'Password must have at least 8 characters';\n      } else {\n        hasError = false;\n        error = '';\n      }\n      break;\n    default:\n      break;\n  }\n  return {\n    hasError,\n    error\n  };\n};\nexport const onFocusOut = (name, value, dispatch, formState) => {\n  const {\n    hasError,\n    error\n  } = validateInput(name, value);\n  let isFormValid = true;\n  for (const key in formState) {\n    const item = formState[key];\n    if (key === name && hasError) {\n      isFormValid = false;\n      break;\n    } else if (key !== name && item.hasError) {\n      isFormValid = false;\n      break;\n    }\n  }\n  dispatch({\n    type: UPDATE_FORM,\n    data: {\n      name,\n      value,\n      hasError,\n      error,\n      touched: true,\n      isFormValid\n    }\n  });\n};\nexport const onInputChange = (name, value, dispatch, formState) => {\n  const {\n    hasError,\n    error\n  } = validateInput(name, value);\n  let isFormValid = true;\n  for (const key in formState) {\n    const item = formState[key];\n    // Check if the current field has error\n    if (key === name && hasError) {\n      isFormValid = false;\n      break;\n    } else if (key !== name && item.hasError) {\n      // Check if any other field has error\n      isFormValid = false;\n      break;\n    }\n  }\n  dispatch({\n    type: UPDATE_FORM,\n    data: {\n      name,\n      value,\n      hasError,\n      error,\n      touched: false,\n      isFormValid\n    }\n  });\n};","map":{"version":3,"names":["UPDATE_FORM","validateInput","name","value","hasError","error","trim","test","length","onFocusOut","dispatch","formState","isFormValid","key","item","type","data","touched","onInputChange"],"sources":["/home/anani/Desktop/MERN/useReducer/src/components/lib/utl.js"],"sourcesContent":["export const UPDATE_FORM = 'UPDATE_FORM'\nexport const validateInput = (name, value) => {\n  let hasError = false,\n    error = ''\n  switch (name) {\n    case 'name':\n      if (value.trim() === '') {\n        hasError = true\n        error = 'Name cannot be empty'\n      } else if (!/^[a-zA-Z ]+$/.test(value)) {\n        hasError = true\n        error = 'Invalid Name. Avoid Special characters'\n      } else {\n        hasError = false\n        error = ''\n      }\n      break\n    case 'email':\n      if (value.trim() === '') {\n        hasError = true\n        error = 'Email cannot be empty'\n      } else if (\n        !/^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/.test(\n          value\n        )\n      ) {\n        hasError = true\n        error = 'Invalid Email'\n      } else {\n        hasError = false\n        error = ''\n      }\n      break\n    case 'password':\n      if (value.trim() === '') {\n        hasError = true\n        error = 'Password cannot be empty'\n      } else if (value.trim().length < 8) {\n        hasError = true\n        error = 'Password must have at least 8 characters'\n      } else {\n        hasError = false\n        error = ''\n      }\n      break\n    default:\n      break\n  }\n  return { hasError, error }\n}\n\nexport const onFocusOut = (name, value, dispatch, formState) => {\n  const { hasError, error } = validateInput(name, value)\n  let isFormValid = true\n  for (const key in formState) {\n    const item = formState[key]\n    if (key === name && hasError) {\n      isFormValid = false\n      break\n    } else if (key !== name && item.hasError) {\n      isFormValid = false\n      break\n    }\n  }\n\n  dispatch({\n    type: UPDATE_FORM,\n    data: { name, value, hasError, error, touched: true, isFormValid },\n  })\n}\n\nexport const onInputChange = (name, value, dispatch, formState) => {\n  const { hasError, error } = validateInput(name, value)\n  let isFormValid = true\n\n  for (const key in formState) {\n    const item = formState[key]\n    // Check if the current field has error\n    if (key === name && hasError) {\n      isFormValid = false\n      break\n    } else if (key !== name && item.hasError) {\n      // Check if any other field has error\n      isFormValid = false\n      break\n    }\n  }\n\n  dispatch({\n    type: UPDATE_FORM,\n    data: { name, value, hasError, error, touched: false, isFormValid },\n  })\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}